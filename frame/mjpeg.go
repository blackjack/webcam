package frame

import (
	"bytes"
	"fmt"
	"image"
	"image/color"
	"image/jpeg"
	"runtime"
)

type fMJPEG struct {
	img     image.Image
	release func()
}

const (
	sectionFlag = 0xFF
	soiMarker   = 0xd8
	eoiMarker   = 0xd9
	dhtMarker   = 0xc4
	sosMarker   = 0xda
)

// Default Huffman tables.
var default_dht []byte = []byte{
	0xff, 0xc4, 0x01, 0xa2,

	0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,

	0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,

	0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04,
	0x04, 0x00, 0x00, 0x01, 0x7d,
	0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,
	0x13, 0x51, 0x61, 0x07,
	0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1,
	0x15, 0x52, 0xd1, 0xf0,
	0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a,
	0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
	0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
	0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85,
	0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
	0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2,
	0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
	0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
	0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
	0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,

	0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04,
	0x04, 0x00, 0x01, 0x02, 0x77,
	0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41,
	0x51, 0x07, 0x61, 0x71,
	0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09,
	0x23, 0x33, 0x52, 0xf0,
	0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17,
	0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
	0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54,
	0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
	0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83,
	0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
	0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9,
	0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
	0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6,
	0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
	0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
}

// Register this framer for this format.
func init() {
	RegisterFramer("MJPG", newMJPGFramer)
}

func newMJPGFramer(w, h, stride, size int) func([]byte, func()) (Frame, error) {
	return mjpegFramer
}

// Wrap a mjpeg block in a Frame so that it can be used as an image.
// The standard jpeg decoding does not work if there are no Huffman tables,
// so check the frame and add a default table if required.
func mjpegFramer(f []byte, rel func()) (Frame, error) {
	img, err := decodeMJPEG(f)
	if err != nil {
		if rel != nil {
			rel()
		}
		return nil, err
	}
	fr := &fMJPEG{img: img, release: rel}
	runtime.SetFinalizer(fr, func(obj Frame) {
		obj.Release()
	})
	return fr, nil
}

// decodeMJPEG decodes the frame into an image.
func decodeMJPEG(f []byte) (image.Image, error) {
	sect, err := findConfig(f)
	if err != nil {
		return nil, err
	}
	_, ok := sect[dhtMarker]
	var buf *bytes.Buffer
	if !ok {
		s, ok := sect[sosMarker]
		if !ok {
			return nil, fmt.Errorf("no scan data in image")
		}
		// Insert the default Huffman table before the start
		// of the scan data.
		ins := s[0]
		buf = new(bytes.Buffer)
		buf.Write(f[:ins])
		buf.Write(default_dht)
		buf.Write(f[ins:])
	} else {
		buf = bytes.NewBuffer(f)
	}
	return jpeg.Decode(buf)
}

func (f *fMJPEG) ColorModel() color.Model {
	return f.img.ColorModel()
}

func (f *fMJPEG) Bounds() image.Rectangle {
	return f.img.Bounds()
}

func (f *fMJPEG) At(x, y int) color.Color {
	return f.img.At(x, y)
}

// Done with frame, release back to camera (if required).
func (f *fMJPEG) Release() {
	if f.release != nil {
		f.release()
		// Make sure it only gets called once.
		f.release = nil
	}
}

// findConfig returns a map of the different config markers and their location.
func findConfig(f []byte) (map[byte][]int, error) {
	m := make(map[byte][]int)
	for l := 0; l < len(f)-1; {
		if f[l] != sectionFlag {
			return nil, fmt.Errorf("No section marker at location %d", l)
		}
		l++
		marker := f[l]
		m[marker] = append(m[marker], l-1)
		l++
		if marker == soiMarker || marker == eoiMarker {
			continue
		}
		if marker == sosMarker {
			break
		}
		// next 2 bytes are length of the section (big-endian).
		if l >= len(f)-2 {
			return nil, fmt.Errorf("unexpected EOF at location %d", l)
		}
		l += (int(f[l]) << 8) + int(f[l+1])
	}
	return m, nil
}
